<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>cloud networking - Category - Blog</title><link>http://wcollins.io/categories/cloud-networking/</link><description>cloud networking - Category - Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 15 Feb 2024 16:48:03 -0500</lastBuildDate><atom:link href="http://wcollins.io/categories/cloud-networking/" rel="self" type="application/rss+xml"/><item><title>GCP SDK Fun</title><link>http://wcollins.io/posts/2024/gcp-sdk-fun/</link><pubDate>Thu, 15 Feb 2024 16:48:03 -0500</pubDate><author><name>William Collins</name></author><guid>http://wcollins.io/posts/2024/gcp-sdk-fun/</guid><description>Sometimes, especially if you aren&amp;rsquo;t a developer by trade, you can get stuck on something small that will find you banging your forehead on your desk (figuratively, of course). Most of the time, it is easy enough to find an answer online or even from ChatGPT. Other times, you may not be so lucky. The other day, I fell victim to a TWE or time wasting event that I thought was worth writing about.</description></item><item><title>Using Terraform Import Blocks with Alkira</title><link>http://wcollins.io/posts/2023/using-terraform-import-blocks-with-alkira/</link><pubDate>Thu, 06 Jul 2023 14:37:36 -0400</pubDate><author><name>William Collins</name></author><guid>http://wcollins.io/posts/2023/using-terraform-import-blocks-with-alkira/</guid><description>For many moons, importing existing infrastructure (that is to say, infrastructure running outside of Terraform state), has not been a trivial task. Historically, Terraform did not generate any configuration. You would have to write the infrastructure-as-code in a manner that reflects how it was deployed. Then, to make matters not easier, you would fetch the &amp;lsquo;ol shovel and dig out the unique resource identifiers to feed through the command line. Handling a single resource in this manner is pretty simple.</description></item><item><title>AWS DC Summit - Recap</title><link>http://wcollins.io/posts/2023/aws-dc-summit-recap/</link><pubDate>Tue, 20 Jun 2023 08:54:11 -0400</pubDate><author><name>William Collins</name></author><guid>http://wcollins.io/posts/2023/aws-dc-summit-recap/</guid><description>What fits somewhere in between re:Invent and Community Day events? That would be the AWS Summits! This year, I got to experience a double dose of fun by representing Alkira at our booth and presenting at the AWS Community Developer Lounge. I may be biased, but I believe the Alkira team is the best in the world.
It was a blast getting to talk about cloud networking with event attendees while getting a glimpse of how the public sector is adapting to change.</description></item><item><title>Evolution of AWS Site-to-Site VPN - Part 2</title><link>http://wcollins.io/posts/2023/evolution-of-aws-site-to-site-vpn-part-2/</link><pubDate>Fri, 03 Feb 2023 16:16:25 -0500</pubDate><author><name>William Collins</name></author><guid>http://wcollins.io/posts/2023/evolution-of-aws-site-to-site-vpn-part-2/</guid><description>In Part 1, we talked about the origins of the Site-to-Site VPN Service in AWS. As consumers began to scale in the early days, they faced tunnel sprawl, performance constraints, and the need for a simplified design. AWS responded with Transit Gateway. How did Transit Gateway simplify architecture leading to smoother operations, better network performance, and a scalable blueprint for the future network?
Intro Pre Transit GatewaySecurity teams in the early days would often balk at the idea of using VPC peering without having a centralized transit hub (where the hybrid connectivity was landed).</description></item><item><title>Evolution of AWS Site-to-Site VPN - Part 1</title><link>http://wcollins.io/posts/2022/evolution-of-aws-site-to-site-vpn-part-1/</link><pubDate>Tue, 22 Nov 2022 08:15:58 -0500</pubDate><author><name>William Collins</name></author><guid>http://wcollins.io/posts/2022/evolution-of-aws-site-to-site-vpn-part-1/</guid><description>The necessity for protocols to keep communication secure has been around since the dawn of the internet. The first ever VPN was jointly developed by a vendor consortium (which included Microsoft) in 1996, and came in the form of Point-to-Point Tunneling Protocol. Although many are skeptical about the value of VPNs in 2022 and beyond, customer consumption of cloud provider VPN services have paved the way for additional features and exponential scale.</description></item><item><title>Terraforming Alkira and Fortinet is Multicloud Bliss</title><link>http://wcollins.io/posts/2022/terraforming-alkira-and-fortinet-is-multicloud-bliss/</link><pubDate>Wed, 03 Aug 2022 13:42:35 -0400</pubDate><author><name>William Collins</name></author><guid>http://wcollins.io/posts/2022/terraforming-alkira-and-fortinet-is-multicloud-bliss/</guid><description>There is a reason why enterprises prefer the best-of-breed approach to connect and secure their network and intellectual property. Alkira announced its integration with Fortinet at AWS re:Inforce in July, and this is a perfect example of the best in action. As anyone that reads my blog knows, I have an automation first approach to everything. Alkira&amp;rsquo;s Terraform Provider is Fortinet ready, so let&amp;rsquo;s take it for a spin!
Intro Key FeaturesThis partnership comes packed with great features, including the seamless integration of FortiManager (which orchestrates the Fortinet Security Fabric), extending existing firewall zones into and across clouds with auto-mapping of zones-to-groups, and weathering traffic surges with auto-scaling.</description></item><item><title>Getting Started With Alkira And Terraform (Part 4)</title><link>http://wcollins.io/posts/2021/getting-started-with-alkira-and-terraform-part-4/</link><pubDate>Wed, 27 Oct 2021 15:10:56 -0400</pubDate><author><name>William Collins</name></author><guid>http://wcollins.io/posts/2021/getting-started-with-alkira-and-terraform-part-4/</guid><description>In Part 1, we laid out our foundation. In Part 2 and Part 3 we connected various networks (both cloud and on-premises) and provisioned NGFWs that scale to real-time capacity. By default, networks connected to our corporate segment have full-mesh connectivity to each other. Let&amp;rsquo;s build some policies in code that can work with the groups we created to produce logical micro-segmentation that mirror a few real-world use cases.
Your browser does not support video.</description></item><item><title>Getting Started With Alkira And Terraform (Part 3)</title><link>http://wcollins.io/posts/2021/getting-started-with-alkira-and-terraform-part-3/</link><pubDate>Thu, 14 Oct 2021 07:53:57 -0400</pubDate><author><name>William Collins</name></author><guid>http://wcollins.io/posts/2021/getting-started-with-alkira-and-terraform-part-3/</guid><description>Check out Part 1 and Part 2 where we put together a scalable foundation and connect cloud networks from AWS, Azure, and GCP. For Part 3, we will bring on-premises back into the spotlight and connect some sites over Cisco SD-WAN and IPSEC.
On-premises remains a strong focus for many enterprises through 2021 going into 2022. Some workloads, as noted by Amazon CEO Andy Jassy, may never move to the cloud.</description></item><item><title>Getting Started With Alkira And Terraform (Part 2)</title><link>http://wcollins.io/posts/2021/getting-started-with-alkira-and-terraform-part-2/</link><pubDate>Thu, 16 Sep 2021 09:26:46 -0400</pubDate><author><name>William Collins</name></author><guid>http://wcollins.io/posts/2021/getting-started-with-alkira-and-terraform-part-2/</guid><description>In Part 1, we started with a scalable foundation that can adapt over time as the business grows and adjusts to changing markets. With Alkira&amp;rsquo;s Network Cloud, we take a cloud native approach in enabling our customer&amp;rsquo;s transformation. No appliances need to be provisioned in remote VPCs or VNets, and no agents need to be installed on workloads. Getting started is as easy as kicking off a build pipeline. For Part 2, let&amp;rsquo;s connect some networks from AWS, Azure, and GCP.</description></item><item><title>Getting Started With Alkira And Terraform - (Part 1)</title><link>http://wcollins.io/posts/2021/getting-started-with-alkira-and-terraform-part-1/</link><pubDate>Fri, 10 Sep 2021 08:43:42 -0400</pubDate><author><name>William Collins</name></author><guid>http://wcollins.io/posts/2021/getting-started-with-alkira-and-terraform-part-1/</guid><description>HashiCorp&amp;rsquo;s Terraform needs no introduction. It is all but the de facto vehicle for delivering cloud infrastructure, and for a good reason. What Terraform did for Multi-Cloud Infrastructure as Code, is precisely what Alkira does for the network. What happens when you use these two platforms together to deliver networking in and across clouds? If providing network services in code faster than ever before sounds interesting, this multi-part series is for you.</description></item></channel></rss>